generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  productId   Int   
  cartId      String  @db.ObjectId
  quantity    Int
  size        String

  cart        Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Cart {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  products           Product[]
  userId             String  @db.ObjectId

  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model WishList {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  productsId         Int[]
  addedAt            DateTime
  userId             String  @db.ObjectId
  
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  image           String?
  hashedPassword  String?   @db.String
  emailVerified   DateTime?
  cart            Cart?
  wishList        WishList?

  accounts        Account[]
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model PasswordResetToken {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String      @unique @db.String
  expires   DateTime

  @@unique([email, token])
}